#!/usr/bin/env python3

import json
import locale
import sys
import os
import reports
import emails

def load_data(filename):
  """Loads the contents of filename as a JSON file."""
  with open(filename) as json_file:
    data = json.load(json_file)
  return data


def format_car(car):
  """Given a car dictionary, returns a nicely formatted name."""
  return "{} {} ({})".format(
      car["car_make"], car["car_model"], car["car_year"])


def process_data(data):
  """Analyzes the data, looking for maximums.

  Returns a list of lines that summarize the information.
  """
  max_revenue = {"revenue": 0}
  max_sales = {'max_sold': 0}
  car_popularity = {}
  for item in data:
    # Calculate the revenue generated by this model (price * total_sales)
    # We need to convert the price from "$1234.56" to 1234.56
    item_price = locale.atof(item["price"].strip("$"))
    item_revenue = item["total_sales"] * item_price
    if item_revenue > max_revenue["revenue"]:
      item["revenue"] = item_revenue
      max_revenue = item

    # TODO: also handle max sales
    item_sales = item['total_sales']
    if item_sales > max_sales['max_sold']:
      item['max_sold'] = item_sales
      max_sales = item

    # TODO: also handle most popular car_year
    year = item['car']['car_year']
    car_popularity[year] = car_popularity.get(year,0)+item['total_sales']
    popular_year = max(car_popularity, key=car_popularity.get)


  summary = [
    "The {} generated the most revenue: ${}".format(
      format_car(max_revenue["car"]), max_revenue["revenue"]),
    "The {} has the most sales: {}".format(format_car(max_sales['car']), max_sales['max_sold']),
    "The most popular year was {} with {} sales.".format(popular_year, car_popularity[popular_year])
      ]

  return summary


def cars_dict_to_table(car_data):
  """Turns the data in car_data into a list of lists."""
  table_data = [["ID", "Car", "Price", "Total Sales"]]
  for item in car_data:
    table_data.append([item["id"], format_car(item["car"]), item["price"], item["total_sales"]])
  return table_data


def main(argv):
  """Process the JSON data and generate a full report out of it."""
  data = load_data("car_sales.json")
  summary = process_data(data)
  table = cars_dict_to_table(data)
  #remove the first line in the table so I can sort the rest.
  table_raw = table[1:]
  table_sorted = sorted(table_raw, key=lambda x:x[3], reverse=True)
  #adding the header back to the table
  table_sorted.insert(0, ["ID", "Car", "Price", "Total Sales"])
  report_summary = summary[0] + "<br/>" + summary[1] + "<br/>" + summary[2] + "<br/>"
  # TODO: turn this into a PDF report
  reports.generate("/tmp/cars.pdf","Title",report_summary, table_sorted)

  # TODO: send the PDF report as an email attachment
  sender = 'automation@example.com'
  receiver = '{}@example.com'.format(os.environ.get('USER'))
  subject = "Sales summary for last month"
  body = summary[0]+"\n"+summary[1]+"\n"+summary[2]+"\n"
  package = "/tmp/cars.pdf"
  message = emails.generate(sender, receiver, subject, body, package)
  emails.send(message)


if __name__ == "__main__":
  main(sys.argv)